<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/style/prep.css">
    <title>Prep Phase</title>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1>Preparation Phase</h1>
    <div class="container">
        <div class="numbers">
            <% for (let i = 0; i < 10; i++) { %>
                <div><%= i %></div>
            <% } %>
        </div>
        <div class="letters">
            <% for (let letter of ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']) { %>
                <div><%= letter %></div>
            <% } %>
        </div>
        <div class="board">
            <% for (let i = 0; i < 10; i++) { %>
                <% for (let j = 0; j < 10; j++) { %>
                    <div data-row="<%= i %>" data-col="<%= j %>"></div>
                <% } %>
            <% } %>
        </div>

        <div class="info">
            <h3>Available Ships</h3>
            <ul id="ship-list">
            </ul>
            <button id="add">Add Ship</button>
            <button id="clear">Clear</button>
            <button id="confirm">Confirm</button>
        </div>
    </div>
    <script src="/js/API.js"></script>
    <script src="/js/utils.js"></script>
    <script src="/js/actions.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/script.js"></script>
    <script>
        let ShipList = document.getElementById('ship-list');
        let AddButton = document.getElementById('add');
        let ClearButton = document.getElementById('clear');
        let ConfirmButton = document.getElementById('confirm');
        let Cells = document.querySelectorAll('.board div');
        let Info = document.getElementsByClassName('info')[0];

        let startShipSizes = [2, 2, 2, 3, 3, 4];
        let currentShipSizes = [...startShipSizes];
        let parts = [];

        const urlParams = new URLSearchParams(window.location.search);
        const Player = urlParams.get('player');
        let Id;

        const fullUrl = window.location.href;
        const urlParts = fullUrl.split('/');
        const gameIndex = urlParts.indexOf('game');
        if (gameIndex !== -1 && urlParts[gameIndex + 1]) {
            Id = urlParts[gameIndex + 1];
        }

        function validateShip() {
            let dist = 0;
            const rows = parts.map(([row, col]) => Number(row));
            const cols = parts.map(([row, col]) => Number(col));

            if (rows.every(row => row === rows[0])) {
                dist = Math.abs(Math.min(...cols) - Math.max(...cols))
            } else if (cols.every(col => col === cols[0])) {      
                dist = Math.abs(Math.min(...rows) - Math.max(...rows))
            }
            return (dist+1 === parts.length) ? dist+1 : 0;
        }

        function crossOutShip() {
            const index = currentShipSizes.indexOf(parts.length)
            currentShipSizes.splice(index, 1)
        }

        function toggleCellSelection(row, col) {
            const cell = document.querySelector(`[data-row='${row}'][data-col='${col}']`);
            cell.classList.toggle('selected');
        }

        function addCurrentChoice(row, col) {
            parts.push([row, col]);
            toggleCellSelection(row, col);
        }

        function sortParts() {
            parts.sort(([row1, col1], [row2, col2]) => {
                if (row1 === row2) {
                    return col1 - col2;
                } else {
                    return row1 - row2;
                }
            })
        }

        function confirmShip() {
            parts.forEach(([row, col]) => {
                const cell = document.querySelector(`[data-row='${row}'][data-col='${col}']`);
                cell.classList.add('ship')
                cell.classList.remove('selected')
            })
        }

        function checkCellsAround(row, col) {
            const top = document.querySelector(`[data-row='${row-1}'][data-col='${col}']`);
            const right = document.querySelector(`[data-row='${row}'][data-col='${col+1}']`);
            const bottom = document.querySelector(`[data-row='${row+1}'][data-col='${col}']`);
            const left = document.querySelector(`[data-row='${row}'][data-col='${col-1}']`);
            const leftBottom = document.querySelector(`[data-row='${row+1}'][data-col='${col-1}']`);
            const leftTop = document.querySelector(`[data-row='${row-1}'][data-col='${col-1}']`);
            const rightBottom = document.querySelector(`[data-row='${row+1}'][data-col='${col+1}']`);
            const rightTop = document.querySelector(`[data-row='${row-1}'][data-col='${col+1}']`);

            const topCon = (top && top.classList.contains('ship'));
            const rightCon = (right && right.classList.contains('ship'));
            const bottomCon = (bottom && bottom.classList.contains('ship'));
            const leftCon = (left && left.classList.contains('ship'));
            const leftBottomCon = (leftBottom && leftBottom.classList.contains('ship'));
            const leftTopCon = (leftTop && leftTop.classList.contains('ship'));
            const rightBottomCon = (rightBottom && rightBottom.classList.contains('ship'));
            const rightTopCon = (rightTop && rightTop.classList.contains('ship'));

            return topCon || rightCon || bottomCon || leftCon || leftBottomCon || leftTopCon || rightBottomCon || rightTopCon;
        }

        function disableCellsAroundShip() {
            Cells.forEach(cell => {
                const row = Number(cell.attributes['data-row'].value);
                const col = Number(cell.attributes['data-col'].value);
                if (!cell.classList.contains('ship') && checkCellsAround(row, col)) {
                    cell.classList.add('ship-aside');
                }
            })
        }

        function clearWrongChoice() {
            parts.forEach(([row, col]) => {
                const cell = document.querySelector(`[data-row='${row}'][data-col='${col}']`);
                cell.classList.remove('selected')
            })
        }
        
        function allShipsPlaced() {
            if (currentShipSizes.length === 0) {
                Cells.forEach(cell => {
                    if (!cell.classList.contains('ship')) {
                        cell.classList.add('all-placed');
                    }
                });
            }
        }

        function shipListRender() {
            for (let ship of new Set(startShipSizes)) {
                let li = document.createElement("li")
                let span = document.createElement("span")
                span.innerHTML = `${startShipSizes.filter(s => s === ship).length} x `
                let img = document.createElement("img")
                img.height = 24
                img.widht = 24
                img.src = "https://img.icons8.com/ios/50/rounded-square.png"
                img.alt = "rounded-square"
                li.appendChild(span.cloneNode(true))
                for (let i=0; i < ship; i++) {
                    li.appendChild(img.cloneNode(true))
                }
                ShipList.appendChild(li)
            }
        }

        function shipListRefresh() {
            ShipList.innerHTML = "";
            for (let ship of new Set(currentShipSizes)) {
                let li = document.createElement("li")
                let span = document.createElement("span")
                span.innerHTML = `${currentShipSizes.filter(s => s === ship).length} x `
                let img = document.createElement("img")
                img.height = 24
                img.widht = 24
                img.src = "https://img.icons8.com/ios/50/rounded-square.png"
                img.alt = "rounded-square"
                li.appendChild(span.cloneNode(true))
                for (let i=0; i < ship; i++) {
                    li.appendChild(img.cloneNode(true))
                }
                ShipList.appendChild(li)
            }
        }

        function toggleClearButton() {
            if (currentShipSizes.length === startShipSizes.length && !ClearButton.classList.contains('disabled')) {
                ClearButton.classList.add('disabled')
            } else if (currentShipSizes.length < startShipSizes.length && ClearButton.classList.contains('disabled')) {
                ClearButton.classList.remove('disabled')
            }
        }

        function toggleConfirmButton() {
            if (currentShipSizes.length !== 0 && !ConfirmButton.classList.contains('disabled')) {
                ConfirmButton.classList.add('disabled')
            } else if (currentShipSizes.length === 0 && ConfirmButton.classList.contains('disabled')) {
                ConfirmButton.classList.remove('disabled')
            }
        }

        shipListRender();
        toggleClearButton();
        toggleConfirmButton();

        Cells.forEach(field => field.addEventListener('click', () => {
            if (!field.classList.contains('selected')) {
                parts.push([field.attributes['data-row'].value, field.attributes['data-col'].value])
                field.classList.add('selected')
            } else {
                field.classList.remove("selected")
                parts.splice(parts.indexOf([field.attributes['data-row'].value, field.attributes['data-col'].value]), 1)
            }
        }))

        AddButton.addEventListener('click', () => {
            if(currentShipSizes.includes(validateShip(parts))) {
                sortParts();
                confirmShip();
                disableCellsAroundShip();
                crossOutShip();
                shipListRefresh();
                allShipsPlaced();
                actions.makePrepChoice(Player, Id, { parts })
                parts = [];
                toggleClearButton();
                toggleConfirmButton();
            } else {
                clearWrongChoice();
                parts = [];
            }
        })

        ClearButton.addEventListener('click', () => {
            Cells.forEach(cell => cell.classList=[]);
            actions.prepClear(Player, Id)
            parts = [];
            currentShipSizes = [...startShipSizes];
            shipListRefresh();
            toggleClearButton();
            toggleConfirmButton();
        });

        ConfirmButton.addEventListener('click', () => {
            Cells.forEach(cell => {
                if (!cell.classList.contains('ship')) {
                    cell.classList.add('confirmed');
                }
            });
            Info.hidden = true;
            actions.prepConfirm(Player, Id);
        });

        function newPlayer(message) {
            alert(message)
        }

        async function roomJoining() {
            const game = await actions.gameState(Id);
            const gameName = game.name;
            socket.emit('join', Player, gameName);
        }

        socket.on('joined', (message) => {
            newPlayer(message)
        })

        roomJoining()
    </script>
</body>
</html>
