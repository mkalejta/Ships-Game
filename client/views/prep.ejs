<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/style/prep.css">
    <title>Battleship Game</title>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
</head>
<body>
    <div class="container">
        <div class="board">
            <% for (let i = 0; i < 10; i++) { %>
                <% for (let j = 0; j < 10; j++) { %>
                    <div data-row="<%= i %>" data-col="<%= j %>"></div>
                <% } %>
            <% } %>
        </div>

        <div class="info">
            <h3>Available Ships</h3>
            <ul id="ship-list">
            </ul>
            <button id="add">Add Ship</button>
            <button id="clear">Clear</button>
            <button id="confirm">Confirm</button>
        </div>
    </div>
    <script src="/js/API.js"></script>
    <script src="/js/utils.js"></script>
    <script src="/js/actions.js"></script>
    <script>
        let ShipList = document.getElementById('ship-list');
        let AddButton = document.getElementById('add');
        let ClearButton = document.getElementById('clear');
        let ConfirmButton = document.getElementById('confirm');
        let Cells = document.querySelectorAll('.board div');
        let Info = document.getElementsByClassName('info')[0];

        let startShipSizes = [2, 2, 2, 3, 3, 4];
        let currentShipSizes = [];
        let parts = [];

        const urlParams = new URLSearchParams(window.location.search);
        const Player = urlParams.get('player');
        let Id;

        const fullUrl = window.location.href;
        const urlParts = fullUrl.split('/');
        const gameIndex = urlParts.indexOf('game');
        if (gameIndex !== -1 && urlParts[gameIndex + 1]) {
            Id = urlParts[gameIndex + 1];
        }

        function validateShip() {
            let dist = 0;
            const rows = parts.map(([row, col]) => Number(row));
            const cols = parts.map(([row, col]) => Number(col));

            if (rows.every(row => row === rows[0])) {
                dist = Math.abs(Math.min(...cols) - Math.max(...cols))
            } else if (cols.every(col => col === cols[0])) {      
                dist = Math.abs(Math.min(...rows) - Math.max(...rows))
            }
            return dist+1;
        }

        function crossOutShip() {
            const index = currentShipSizes.indexOf(parts.length)
            currentShipSizes.splice(index, 1)
        }

        function toggleCellSelection(row, col) {
            const cell = document.querySelector(`[data-row='${row}'][data-col='${col}']`);
            cell.classList.toggle('selected');
        }

        function addCurrentChoice(row, col) {
            parts.push([row, col]);
            toggleCellSelection(row, col);
        }

        function confirmShip() {
            parts.forEach(([row, col]) => {
                const cell = document.querySelector(`[data-row='${row}'][data-col='${col}']`);
                cell.classList.add('ship')
                cell.classList.remove('selected')
            })
        }

        function clearWrongChoice() {
            parts.forEach(([row, col]) => {
                const cell = document.querySelector(`[data-row='${row}'][data-col='${col}']`);
                cell.classList.remove('selected')
            })
        }
        
        function allShipsPlaced() {
            if (currentShipSizes.length === 0) {
                Cells.forEach(cell => {
                    if (!cell.classList.contains('ship')) {
                        cell.classList.add('all-placed');
                    }
                });
            }
        }

        function shipListRender() {
            for (let ship of startShipSizes) {
                let li = document.createElement("li")
                let elem;
                li.appendChild(document.createTextNode(ship))
                ShipList.appendChild(li)
                elem += `<li>${ship}</li>`
                currentShipSizes.push(ship)
            }
        }

        function shipListRefresh() {
            ShipList.innerHTML = "";
            for (let ship of currentShipSizes) {
                let li = document.createElement("li")
                let elem;
                li.appendChild(document.createTextNode(ship))
                ShipList.appendChild(li)
                elem += `<li>${ship}</li>`
            }
        }

        shipListRender();

        Cells.forEach(field => field.addEventListener('click', () => {
            if (!field.classList.contains('selected')) {
                parts.push([field.attributes['data-row'].value, field.attributes['data-col'].value])
                field.classList.add('selected')
            } else {
                field.classList.remove("selected");
                parts.splice(parts.indexOf([field.attributes['data-row'].value, field.attributes['data-col'].value]), 1)
            }
        }))

        AddButton.addEventListener('click', () => {
            if(currentShipSizes.includes(validateShip(parts))) {
                confirmShip();
                crossOutShip();
                shipListRefresh();
                allShipsPlaced();
                actions.makePrepChoice(Player, Id, { parts })
                parts = [];
            } else {
                clearWrongChoice();
                parts = [];
            }
        })

        ClearButton.addEventListener('click', () => {
            Cells.forEach(cell => cell.classList.remove('selected', 'ship', 'all-placed'));
            actions.prepClear(Player, Id)
            parts = [];
            currentShipSizes = [...startShipSizes];
            shipListRefresh();
        });

        ConfirmButton.addEventListener('click', () => {
            Cells.forEach(cell => {
                if (!cell.classList.contains('ship')) {
                    cell.classList.add('confirmed');
                }
            });
            Info.hidden = true;
            actions.prepConfirm(Player, Id);
        });
    </script>
</body>
</html>
